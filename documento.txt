¬øQu√© es el stack PDV?

Stack	Funci√≥n	            Tecnolog√≠a
P	    Base de datos	    PostgreSQL (relacional, SQL)
D	    Backend/API	        Django (Python framework)
V	    Frontend	        Vue.js (JavaScript framework)


¬øC√≥mo se comunican?
Django expone endpoints REST (/api/...) usando Django REST Framework.
Vue.js consume esos endpoints usando Axios o Fetch para mostrar datos.
PostgreSQL almacena los datos del sitio.


Estructura t√≠pica del proyecto
mi-sitio/
‚îú‚îÄ‚îÄ backend/        ‚Üê Django + PostgreSQL
‚îî‚îÄ‚îÄ frontend/       ‚Üê Vue.js (Vite o Vue CLI)


¬øVentajas?
Django + PostgreSQL es super estable y potente para empresas, administraci√≥n, etc.
Vue.js es f√°cil de aprender y muy visual, ideal para crear interfaces modernas.

Requisitos previos (instala si no los ten√©s):
‚úÖ Python 3.10+
‚úÖ PostgreSQL
‚úÖ Node.js + npm (solo para Vue)
‚úÖ Vue CLI o Vite
‚úÖ pip install pipenv (gestor de entornos virtuales)


INSTALACION
üß™ Paso 1: Backend con Django + PostgreSQL
1.1 Crea el proyecto Django:
    terminal:
        cd backend
        pipenv install django djangorestframework psycopg2-binary
        pipenv shell
        django-admin startproject config .

1.2 Conecta a PostgreSQL
    1.2.1. Crea la base de datos
            Si a√∫n no has creado la base de datos, hacelo as√≠:
            Con pgAdmin:
                Abr√≠ pgAdmin.
                Bot√≥n derecho sobre Databases ‚Üí Create ‚Üí Database...
                Nombre: estructura_db (o el que quieras)
                Guard√°.

    1.2.2. Edita config/settings.py:
            DATABASES = {
                'default': {
                    'ENGINE': 'django.db.backends.postgresql',
                    'NAME': 'estructura_base_PDV',
                    'USER': 'postgres',    
                    'PASSWORD': 'Jazz184*',
                    'HOST': 'localhost',
                    'PORT': '5432', 
                }
            }

Paso 1.3 ‚Äî Instalar el conector de PostgreSQL
    Para que Django pueda hablar con PostgreSQL, necesitas instalar psycopg2 (es el driver de conexi√≥n).
    terminal:
        pip install psycopg2-binary

Paso 1.4 ‚Äî Verificar conexi√≥n
    Corremos una migraci√≥n de prueba para ver que se conecta bien:
    terminal:
        python manage.py migrate

Paso 1.5 ‚Äî Crear una app Django
    terminal:
        backend> python manage.py startapp ventas

Paso 1.6 ‚Äî Crear el proyecto Frontend con Vue.js
    terminal:
        > npm install -g @vue/cli
        > vue create frontend
    Durante el asistente:
        Eleg√≠ Default ([Vue 3] babel, eslint) o configuralo manualmente seg√∫n tu preferencia.
        Acept√° instalar dependencias.
    terminal:
        frontend> cd frontend
        frontend> npm run serve

Paso 1.7 ‚Äî Configurar comunicaci√≥n entre Django (backend) y Vue.js (frontend)
Permitir que el frontend (Vue) pueda hacer peticiones HTTP (por ejemplo, fetch, axios) al backend Django sin problemas de CORS (Cross-Origin Resource Sharing).

    1. Instalar django-cors-headers en tu backend
    En tu entorno virtual de Django:
        backend>pip install django-cors-headers

    2. Configurar corsheaders en settings.py
    Agreg√° 'corsheaders' al inicio de INSTALLED_APPS

    3. Instalar Axios en el frontend (Vue)
    Desde la carpeta frontend/, instal√° Axios.
        frontend>npm install axios

    4. Crear un archivo de configuraci√≥n Axios (opcional pero recomendado)
    Dentro de frontend/src/, cre√° un archivo llamado axios.js:


Paso 1.8 ‚Äî Crear y probar una ruta de prueba en Django y consumirla desde Vue.js
Verificar que el frontend (Vue.js) puede comunicarse correctamente con el backend (Django) a trav√©s de una API.

    Parte 1 ‚Äî Crear un endpoint de prueba en Django
    Crear archivo urls.py dentro de la app ventas si a√∫n no existe

    Parte 2 ‚Äî Consumir ese endpoint desde Vue.js
    Usar Axios en un componente Vue:
    Importar y mostrar el componente (por ejemplo, en App.vue o donde quieras probarlo):